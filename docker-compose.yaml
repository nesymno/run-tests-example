version: '3.8'

services:
  app:
    build: .
    ports:
      - "8080"
    environment:
      - PORT=8080
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=testdb
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres:
    image: public.ecr.aws/docker/library/postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: testdb
    ports:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: public.ecr.aws/docker/library/redis:7-alpine
    ports:
      - "6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # testcontainer:
  #   build:
  #     context: .
  #     dockerfile_inline: |
  #       FROM public.ecr.aws/docker/library/golang:1.24-alpine
  #       WORKDIR /workspace
  #       COPY . .
  #       RUN apk add --no-cache make
  #       RUN go mod download
  #   working_dir: /workspace
  #   networks:
  #     test:
  #       aliases:
  #         - testcontainer
  #   environment:
  #     - APP_HOST=app
  #     - APP_PORT=8080
  #     - POSTGRES_HOST=postgres
  #     - POSTGRES_PORT=5432
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_DB=testdb
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #   depends_on:
  #     app:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   command: >
  #     sh -c "
  #       echo 'Running tests...' &&
  #       go test -v -run TestApp ./...
  #     "

volumes:
  postgres_data:
  redis_data: 